//
// Generated by JTB 1.3.2
//

package hw4;
import piglet.syntaxtree.*;
import piglet.visitor.Visitor;

import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class PigletVisitor implements Visitor {
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public void visit(NodeList n) {
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    public void visit(NodeListOptional n) {
        if ( n.present() )
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
                e.nextElement().accept(this);
    }

    public void visit(NodeOptional n) {
        if ( n.present() )
            n.node.accept(this);
    }

    public void visit(NodeSequence n) {
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }

    public void visit(NodeToken n) { }

    //
    // User-generated visitor methods below
    //

    /**
     * <PRE>
     * f0 -> "MAIN"
     * f1 -> StmtList()
     * f2 -> "END"
     * f3 -> ( Procedure() )*
     * f4 -> &lt;EOF&gt;
     * </PRE>
     */
    public void visit(Goal n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> ( ( Label() )? Stmt() )*
     * </PRE>
     */
    public void visit(StmtList n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Label()
     * f1 -> "["
     * f2 -> IntegerLiteral()
     * f3 -> "]"
     * f4 -> StmtExp()
     * </PRE>
     */
    public void visit(Procedure n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> NoOpStmt()
     *       | ErrorStmt()
     *       | CJumpStmt()
     *       | JumpStmt()
     *       | HStoreStmt()
     *       | HLoadStmt()
     *       | MoveStmt()
     *       | PrintStmt()
     * </PRE>
     */
    public void visit(Stmt n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "NOOP"
     * </PRE>
     */
    public void visit(NoOpStmt n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "ERROR"
     * </PRE>
     */
    public void visit(ErrorStmt n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "CJUMP"
     * f1 -> Exp()
     * f2 -> Label()
     * </PRE>
     */
    public void visit(CJumpStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "JUMP"
     * f1 -> Label()
     * </PRE>
     */
    public void visit(JumpStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "HSTORE"
     * f1 -> Exp()
     * f2 -> IntegerLiteral()
     * f3 -> Exp()
     * </PRE>
     */
    public void visit(HStoreStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "HLOAD"
     * f1 -> Temp()
     * f2 -> Exp()
     * f3 -> IntegerLiteral()
     * </PRE>
     */
    public void visit(HLoadStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "MOVE"
     * f1 -> Temp()
     * f2 -> Exp()
     * </PRE>
     */
    public void visit(MoveStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "PRINT"
     * f1 -> Exp()
     * </PRE>
     */
    public void visit(PrintStmt n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> StmtExp()
     *       | Call()
     *       | HAllocate()
     *       | BinOp()
     *       | Temp()
     *       | IntegerLiteral()
     *       | Label()
     * </PRE>
     */
    public void visit(Exp n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "BEGIN"
     * f1 -> StmtList()
     * f2 -> "RETURN"
     * f3 -> Exp()
     * f4 -> "END"
     * </PRE>
     */
    public void visit(StmtExp n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "CALL"
     * f1 -> Exp()
     * f2 -> "("
     * f3 -> ( Exp() )*
     * f4 -> ")"
     * </PRE>
     */
    public void visit(Call n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "HALLOCATE"
     * f1 -> Exp()
     * </PRE>
     */
    public void visit(HAllocate n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Operator()
     * f1 -> Exp()
     * f2 -> Exp()
     * </PRE>
     */
    public void visit(BinOp n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "LT"
     *       | "PLUS"
     *       | "MINUS"
     *       | "TIMES"
     * </PRE>
     */
    public void visit(Operator n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "TEMP"
     * f1 -> IntegerLiteral()
     * </PRE>
     */
    public void visit(Temp n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> &lt;INTEGER_LITERAL&gt;
     * </PRE>
     */
    public void visit(IntegerLiteral n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> &lt;IDENTIFIER&gt;
     * </PRE>
     */
    public void visit(Label n) {
        n.f0.accept(this);
    }

}
