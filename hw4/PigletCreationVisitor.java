//
// Generated by JTB 1.3.2
//

package hw4;
import minijava.syntaxtree.*;

import java.util.*;
import hw3.*;
import minijava.visitor.Visitor;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class PigletCreationVisitor implements Visitor {
    ArrayList<Var> varList;
    HashMap<Var, Integer> varHashMap = new HashMap<>();
    StringBuilder output = new StringBuilder();
    LinkedList<String> currentLocation = new LinkedList<>();
    public HashMap<LinkedList<String>, ArrayList<Var>> vars;
    int labelNumber = 1;

    int level = 0;
    public PigletCreationVisitor(ArrayList<Var> varList, HashMap<LinkedList<String>, ArrayList<Var>> vars){
        this.varList = varList;
        this.vars = vars;
        for (int i = 0; i < varList.size(); i++) {
            varHashMap.put(varList.get(i), i);
        }
        System.out.println("------------------------------------------------------------------------------------");
        varList.forEach(x -> System.out.println(x.hashCode()));
        System.out.println("------------------------------------------------------------------------------------");
        System.out.println(varHashMap.get(varList.get(2)));
    }
    public Integer getUniqueID(LinkedList<String> list, String varname){
        for(Var var : varList){
            if( var.identifier.f0.tokenImage.equals(varname)){
                return varHashMap.get(var);
            }
        }
        return -1;
    }
    public void append(int level, String stringToAdd){
        for (int i = 0; i < level; i++) {
            output.append("\t");
        }
        output.append(stringToAdd);
    }

    public Var checkVarExists(LinkedList<String> location, Identifier identifier){
        //1. Make sure this var exists
        LinkedList<String> tempLoc = new LinkedList<>(location);
        while(!tempLoc.isEmpty()){
            if(vars.get(tempLoc) != null && !vars.get(tempLoc).isEmpty()){
                for(Var v : vars.get(tempLoc)){
                    if(v.identifier.f0.tokenImage.equals(identifier.f0.tokenImage)){
                        //found the Var!
                        return v;
                    }
                }
            }
            tempLoc.removeLast();
        }
        //reached the root without finding the Var
        throw new TypeError("Unable to find Var named: " + identifier.f0.tokenImage + " at line "
                + identifier.f0.beginLine + " column " + identifier.f0.beginColumn);
    }

    public void generateMethodCall(Var method){

        append(level, "CALL ");
        level++;
        append(0, "\n");
        append(level, "BEGIN ");
        level++;
        // how many times to allocate/store:
        // count the number of methods in the class being called:


        output.append(method.toString());
        level--;

    }
    //
    //
    // Auto class visitors--probably don't need to be overridden.
    //
    public void visit(NodeList n) {
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }
    public void visit(NodeListOptional n) {
        if ( n.present() )
            for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
                e.nextElement().accept(this);
    }
    public void visit(NodeOptional n) {
        if ( n.present() )
            n.node.accept(this);
    }
    public void visit(NodeSequence n) {
        for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
    }
    public void visit(NodeToken n) { }

    //
    // User-generated visitor methods below
    //

    /**
     * <PRE>
     * f0 -> MainClass()
     * f1 -> ( TypeDeclaration() )*
     * f2 -> &lt;EOF&gt;
     * </PRE>
     */
    public void visit(Goal n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        System.out.println(output.toString());
    }

    /**
     * <PRE>
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> "public"
     * f4 -> "static"
     * f5 -> "void"
     * f6 -> "main"
     * f7 -> "("
     * f8 -> "String"
     * f9 -> "["
     * f10 -> "]"
     * f11 -> Identifier()
     * f12 -> ")"
     * f13 -> "{"
     * f14 -> ( VarDeclaration() )*
     * f15 -> ( Statement() )*
     * f16 -> "}"
     * f17 -> "}"
     * </PRE>
     */
    public void visit(MainClass n) {
        append(level,"MAIN \n");
        level++;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        n.f10.accept(this);
        n.f11.accept(this);
        n.f12.accept(this);
        n.f13.accept(this);
        n.f14.accept(this);
        n.f15.accept(this);
        n.f16.accept(this);
        n.f17.accept(this);
        level--;
        append(level,"\nEND \n\n");
    }

    /**
     * <PRE>
     * f0 -> ClassDeclaration()
     *       | ClassExtendsDeclaration()
     * </PRE>
     */
    public void visit(TypeDeclaration n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "{"
     * f3 -> ( VarDeclaration() )*
     * f4 -> ( MethodDeclaration() )*
     * f5 -> "}"
     * </PRE>
     */
    public void visit(ClassDeclaration n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        currentLocation.add(n.f1.f0.toString());
        n.f3.accept(this);
        n.f4.accept(this);
        currentLocation.remove(currentLocation.size() - 1);
        n.f5.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "class"
     * f1 -> Identifier()
     * f2 -> "extends"
     * f3 -> Identifier()
     * f4 -> "{"
     * f5 -> ( VarDeclaration() )*
     * f6 -> ( MethodDeclaration() )*
     * f7 -> "}"
     * </PRE>
     */
    public void visit(ClassExtendsDeclaration n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        currentLocation.add(n.f1.f0.toString());
        n.f5.accept(this);
        n.f6.accept(this);
        currentLocation.remove(currentLocation.size() - 1);
        n.f7.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Type()
     * f1 -> Identifier()
     * f2 -> ";"
     * </PRE>
     */
    public void visit(VarDeclaration n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "public"
     * f1 -> Type()
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( FormalParameterList() )?
     * f5 -> ")"
     * f6 -> "{"
     * f7 -> ( VarDeclaration() )*
     * f8 -> ( Statement() )*
     * f9 -> "return"
     * f10 -> Expression()
     * f11 -> ";"
     * f12 -> "}"
     * </PRE>
     */
    public void visit(MethodDeclaration n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        int args = 0;
        if (((FormalParameterList) n.f4.node) != null &&
                ((FormalParameterList) n.f4.node).f0 != null) args++;
        if (((FormalParameterList) n.f4.node)!= null &&
                ((FormalParameterList) n.f4.node).f1.nodes != null){
            args += ((FormalParameterList) n.f4.node).f1.nodes.size();
        }
        if (n.f7.nodes != null){
            args += n.f7.nodes.size();
        }
        //if the return value is something new (IE a literal) add it:
        if(!(((PrimaryExpression) n.f10.f0.choice).f0.choice instanceof Identifier)) args++;
        append(0, "\n");
        append(level, currentLocation.getFirst());
        append(0, "_");
        append(0, (n.f2.f0.tokenImage));
        append(0, " [ ");
        append(0, String.valueOf(args));
        append(0, " ] ");
        append(0, "\n");
        level++;
        append(level, "BEGIN");
        level++;
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
        currentLocation.add(n.f2.f0.toString());
        n.f7.accept(this);
        n.f8.accept(this);
        n.f9.accept(this);
        append(0, "\n");
        level--;
        append(level, "RETURN");
        n.f10.accept(this);
        n.f11.accept(this);
        append(0, " END");
        currentLocation.remove(currentLocation.size() - 1);
        n.f12.accept(this);
        level--;
    }

    /**
     * <PRE>
     * f0 -> FormalParameter()
     * f1 -> ( FormalParameterRest() )*
     * </PRE>
     */
    public void visit(FormalParameterList n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Type()
     * f1 -> Identifier()
     * </PRE>
     */
    public void visit(FormalParameter n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> ","
     * f1 -> FormalParameter()
     * </PRE>
     */
    public void visit(FormalParameterRest n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> ArrayType()
     *       | BooleanType()
     *       | IntegerType()
     *       | Identifier()
     * </PRE>
     */
    public void visit(Type n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "int"
     * f1 -> "["
     * f2 -> "]"
     * </PRE>
     */
    public void visit(ArrayType n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "boolean"
     * </PRE>
     */
    public void visit(BooleanType n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "int"
     * </PRE>
     */
    public void visit(IntegerType n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Block()
     *       | AssignmentStatement()
     *       | ArrayAssignmentStatement()
     *       | IfStatement()
     *       | WhileStatement()
     *       | PrintStatement()
     * </PRE>
     */
    public void visit(Statement n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "{"
     * f1 -> ( Statement() )*
     * f2 -> "}"
     * </PRE>
     */
    public void visit(Block n) {
        n.f0.accept(this);
        currentLocation.add(n.f0.toString());
        n.f1.accept(this);
        currentLocation.remove(currentLocation.size() - 1);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> Identifier()
     * f1 -> "="
     * f2 -> Expression()
     * f3 -> ";"
     * </PRE>
     */
    public void visit(AssignmentStatement n) {
        append(0, "\n");
        append(level, "MOVE ");
        n.f0.accept(this);
        append(0, "TEMP ");
        append(0, String.valueOf(getUniqueID(currentLocation, n.f0.f0.tokenImage)));
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        append(0, "\n");
    }

    /**
     * <PRE>
     * f0 -> Identifier()
     * f1 -> "["
     * f2 -> Expression()
     * f3 -> "]"
     * f4 -> "="
     * f5 -> Expression()
     * f6 -> ";"
     * </PRE>
     */
    public void visit(ArrayAssignmentStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
        n.f5.accept(this);
        n.f6.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "if"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * f5 -> "else"
     * f6 -> Statement()
     * </PRE>
     */
    public void visit(IfStatement n) {
        int jumpFalse = labelNumber++;
        int jumpEnd = labelNumber++;
        append(0, "\n");
        append(level, "CJUMP ");
        level++;
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        append(0, " L");
        append(0, String.valueOf(jumpFalse));
        level++;
        n.f4.accept(this);
        append(level, "JUMP L");
        append(0, String.valueOf(jumpEnd));
        level--;
        n.f5.accept(this);
        append(0, "\n");
        append(level, "L");
        append(0, String.valueOf(jumpFalse));
        level++;
        n.f6.accept(this);
        level--;

        append(level, "L");
        append(0, String.valueOf(jumpEnd));
        level++;
        append(0, "\n");
        append(level, "NOOP");
        level--;
        level--;
    }

    /**
     * <PRE>
     * f0 -> "while"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> Statement()
     * </PRE>
     */
    public void visit(WhileStatement n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "System.out.println"
     * f1 -> "("
     * f2 -> Expression()
     * f3 -> ")"
     * f4 -> ";"
     * </PRE>
     */
    public void visit(PrintStatement n) {
        append(0, "\n");
        append(level, "PRINT ");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> AndExpression()
     *       | CompareExpression()
     *       | PlusExpression()
     *       | MinusExpression()
     *       | TimesExpression()
     *       | ArrayLookup()
     *       | ArrayLength()
     *       | MessageSend()
     *       | PrimaryExpression()
     * </PRE>
     */
    public void visit(Expression n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "&&"
     * f2 -> PrimaryExpression()
     * </PRE>
     */
    public void visit(AndExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "&lt;"
     * f2 -> PrimaryExpression()
     * </PRE>
     */
    public void visit(CompareExpression n) {
        append(0, " LT ");
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "+"
     * f2 -> PrimaryExpression()
     * </PRE>
     */
    public void visit(PlusExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        append(0, " PLUS");
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "-"
     * f2 -> PrimaryExpression()
     * </PRE>
     */
    public void visit(MinusExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        append(0, " MINUS");
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "*"
     * f2 -> PrimaryExpression()
     * </PRE>
     */
    public void visit(TimesExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        append(0, " TIMES");
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "["
     * f2 -> PrimaryExpression()
     * f3 -> "]"
     * </PRE>
     */
    public void visit(ArrayLookup n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> "length"
     * </PRE>
     */
    public void visit(ArrayLength n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

    /**
     * <PRE>
     * f0 -> PrimaryExpression()
     * f1 -> "."
     * f2 -> Identifier()
     * f3 -> "("
     * f4 -> ( ExpressionList() )?
     * f5 -> ")"
     * </PRE>
     */
    public void visit(MessageSend n) {
        //this is the CALL:
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        append(0, "\n");
        //append(level, "CALL");

        if( !(n.f0.f0.choice instanceof ThisExpression) &&
                ((AllocationExpression) n.f0.f0.choice).f1.f0 != null){
            LinkedList<String> temploc = new LinkedList<>();
            temploc.add(((AllocationExpression)n.f0.f0.choice).f1.f0.tokenImage);
            generateMethodCall(checkVarExists(temploc, n.f2));
        }
        else generateMethodCall(checkVarExists(currentLocation, n.f2));
        level++;
        n.f3.accept(this);
        append(level, "(");
        n.f4.accept(this);
        append(0, " )");
        n.f5.accept(this);
        level--;

    }

    /**
     * <PRE>
     * f0 -> Expression()
     * f1 -> ( ExpressionRest() )*
     * </PRE>
     */
    public void visit(ExpressionList n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> ","
     * f1 -> Expression()
     * </PRE>
     */
    public void visit(ExpressionRest n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> IntegerLiteral()
     *       | TrueLiteral()
     *       | FalseLiteral()
     *       | Identifier()
     *       | ThisExpression()
     *       | ArrayAllocationExpression()
     *       | AllocationExpression()
     *       | NotExpression()
     *       | BracketExpression()
     * </PRE>
     */
    public void visit(PrimaryExpression n) {
        if(n.f0.choice instanceof IntegerLiteral){
            append(0," ");
            append(0,String.valueOf(((IntegerLiteral) n.f0.choice).f0.tokenImage));
        }
        if(n.f0.choice instanceof TrueLiteral){
            throw new RuntimeException("TODO: How to convert boolean to Piglet");
        }
        if(n.f0.choice instanceof FalseLiteral){
            throw new RuntimeException("TODO: How to convert boolean to Piglet");
        }
        if(n.f0.choice instanceof Identifier){
            append(0, " TEMP ");
            append(0, String.valueOf(getUniqueID(currentLocation,
                    ((Identifier) n.f0.choice).f0.tokenImage)));
        }
        if(n.f0.choice instanceof ThisExpression){
            //TODO: implement this?
        }
        if(n.f0.choice instanceof ArrayAllocationExpression){
            throw new RuntimeException("TODO: How to do arrays in Piglet");
        }
        if(n.f0.choice instanceof AllocationExpression); //ignore
        if(n.f0.choice instanceof NotExpression){
            throw new RuntimeException("TODO: How to do NotExpression in Piglet");
        }
        if(n.f0.choice instanceof BracketExpression){
            //throw new RuntimeException("TODO: How to do BracketExpression in Piglet");
        }
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> &lt;INTEGER_LITERAL&gt;
     * </PRE>
     */
    public void visit(IntegerLiteral n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "true"
     * </PRE>
     */
    public void visit(TrueLiteral n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "false"
     * </PRE>
     */
    public void visit(FalseLiteral n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> &lt;IDENTIFIER&gt;
     * </PRE>
     */
    public void visit(Identifier n) {
        //output.append("\n").append(n.f0.tokenImage);
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "this"
     * </PRE>
     */
    public void visit(ThisExpression n) {
        n.f0.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "new"
     * f1 -> "int"
     * f2 -> "["
     * f3 -> Expression()
     * f4 -> "]"
     * </PRE>
     */
    public void visit(ArrayAllocationExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
        n.f4.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "new"
     * f1 -> Identifier()
     * f2 -> "("
     * f3 -> ")"
     * </PRE>
     */
    public void visit(AllocationExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
        n.f3.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "!"
     * f1 -> Expression()
     * </PRE>
     */
    public void visit(NotExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
    }

    /**
     * <PRE>
     * f0 -> "("
     * f1 -> Expression()
     * f2 -> ")"
     * </PRE>
     */
    public void visit(BracketExpression n) {
        n.f0.accept(this);
        n.f1.accept(this);
        n.f2.accept(this);
    }

}
